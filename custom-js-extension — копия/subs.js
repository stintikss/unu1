(function () {
    function countOpenedCategories() {
        const currentYear = new Date().getFullYear();
        const currentMonth = new Date().getMonth();

        chrome.storage.local.get(['openedCategories'], (data) => {
            let openedCategories = data.openedCategories || {};

            if (!openedCategories[currentYear]) {
                openedCategories[currentYear] = {};
            }

            openedCategories[currentYear][currentMonth] = (openedCategories[currentYear][currentMonth] || 0) + 1;

            chrome.storage.local.set({ openedCategories }, () => {
                console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', openedCategories);
            });
        });
    }

    function highlightSubscribersAndClick() {
        if (document.querySelector('#rc-anchor-container')) {
            console.log("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –∏ –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã...");
            startCountdown(180, "‚è≥ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑-–∑–∞ –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑");
            setTimeout(() => {
                location.reload();
            }, 180000);
            return;
        }

        const tasks = document.querySelectorAll('.task-type');
        console.log('üîé –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:', tasks.length);
        const categories = [
            "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ (–ª–∞–π–∫, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∫–ª–∏–∫–∏)",
            "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏",
            "–õ–∞–π–∫–∏",
            "–ü–æ–∏—Å–∫/–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
        ];

        let foundTasks = false;

        tasks.forEach(taskTypeElement => {
            const taskText = taskTypeElement.textContent.trim();
            console.log('üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', taskText);

            if (!categories.includes(taskText)) return;

            foundTasks = true;
            const taskContainer = taskTypeElement.closest('.search-task__table-row');

            if (!taskContainer || taskContainer.classList.contains('clicked-task')) return;

            taskContainer.classList.add('clicked-task');
            taskContainer.style.backgroundColor = "#ff0";
            const taskNameElement = taskContainer.querySelector('.task-name');

            if (!taskNameElement) return;

            const taskNameText = taskNameElement.textContent.trim().toLowerCase();

            if (taskNameText.includes("ozon") || taskNameText.includes("–æ–∑–æ–Ω")) {
                console.log(`‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ: ${taskNameText}`);
                return;
            }

            console.log(`‚úÖ –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç .task-name (${taskText})`);
            taskNameElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            taskNameElement.click();

            const purpleButton = taskContainer.querySelector('.purple-button');
            if (purpleButton) {
                if (!purpleButton.id) {
                    const uniqueId = 'purple-button-' + Date.now();
                    purpleButton.id = uniqueId;
                    console.log(`üÜî –î–æ–±–∞–≤–ª–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫ –∫–Ω–æ–ø–∫–µ: ${uniqueId}`);
                }

                if (!purpleButton.classList.contains('clicked')) {
                    console.log(`üü£ –ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É .purple-button (${taskText})`);
                    purpleButton.click();
                    purpleButton.classList.add('clicked');
                }
            }

            countOpenedCategories();
        });

        if (!foundTasks) {
            console.log("‚ö†Ô∏è –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        }

        clickShowMoreIfNeeded();
    }

    function clickShowMoreIfNeeded() {
        if (document.querySelector('#rc-anchor-container')) return;

        const showMoreButton = document.getElementById('show_more_button');
        const noTasksMessage = document.querySelector('.search-task__table-cell');

        if (noTasksMessage && noTasksMessage.innerText.includes("–ü–æ–∫–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")) {
            console.log("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.");
        }

        if (showMoreButton) {
            if (!showMoreButton.classList.contains('clicked')) {
                console.log("üìå –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë'");
                showMoreButton.click();
                showMoreButton.classList.add('clicked');

                setTimeout(() => {
                    showMoreButton.classList.remove('clicked');
                    highlightSubscribersAndClick();
                }, 2000);
            }
        }
    }

    function startCountdown(seconds, message) {
        let counter = seconds;
        const interval = setInterval(() => {
            console.log(`${message} ${counter} —Å–µ–∫—É–Ω–¥...`);
            counter--;

            if (counter <= 0) {
                clearInterval(interval);
            }
        }, 1000);
    }

    function scheduleReload() {
        if (document.querySelector('#rc-anchor-container')) {
            console.log("üö® –ö–∞–ø—á–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞. –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã...");
            startCountdown(180, "‚è≥ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑-–∑–∞ –∫–∞–ø—á–∏ —á–µ—Ä–µ–∑");
            setTimeout(() => {
                location.reload();
            }, 180000);
            return;
        }

        console.log("‚è≥ –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 2.5 –º–∏–Ω—É—Ç—ã...");
        startCountdown(150, "‚è≥ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑");
        setTimeout(() => {
            location.reload();
        }, 90000);
    }

    const observerSubs = new MutationObserver(() => {
        if (!document.querySelector('#rc-anchor-container')) {
            setTimeout(highlightSubscribersAndClick, 1000);
        }
    });

    observerSubs.observe(document.body, { childList: true, subtree: true });

    setTimeout(highlightSubscribersAndClick, 1500);
    setInterval(scheduleReload, 150000);

    console.log("üöÄ –í—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –∫–ª–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–ø—É—â–µ–Ω—ã!");
    scheduleReload();
})();
